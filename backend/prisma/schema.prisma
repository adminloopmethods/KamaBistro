// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User models
enum Role {
  ADMIN
  VERIFIER
  EDITOR
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  name         String
  phone        String?
  password     String
  role         Role      @default(EDITOR)
  autoApproval Boolean   @default(false)
  deleted      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  status       Boolean   @default(true)
  locationId   String?
  location     location? @relation(fields: [locationId], references: [id])

  Log Log[]

  editedWebpages   Webpage[] @relation("WebpageEditor")
  verifiedWebpages Webpage[] @relation("WebpageVerifier")
}

model Webpage {
  id         String    @id
  name       String
  locationId String?
  location   location? @relation(fields: [locationId], references: [id])

  contents   Content[]

  editorId   String?
  editor     User?   @relation("WebpageEditor", fields: [editorId], references: [id])

  verifierId String?
  verifier   User?   @relation("WebpageVerifier", fields: [verifierId], references: [id])
}

model Content {
  id        String  @id
  name      String
  order     Int     @default(0)
  webpage   Webpage @relation(fields: [webpageId], references: [id])
  webpageId String

  elements Element[]
  style    Style     @relation("ContentStyle", fields: [styleId], references: [id])
  styleId  String    @unique
}

model Element {
  id      String @id
  name    String
  content String
  order   Int    @default(0)

  contentId  String
  contentRef Content @relation(fields: [contentId], references: [id])

  style   Style  @relation("ElementStyle", fields: [styleId], references: [id])
  styleId String @unique
}

model Style {
  id String @id @default(uuid())

  xl Json?
  lg Json?
  md Json?
  sm Json?

  content Content? @relation("ContentStyle")
  element Element? @relation("ElementStyle")
}

// Logs
model Log {
  id        String   @id @default(uuid())
  action    String
  message   String?
  userId    String? // Nullable if not related to a user
  timestamp DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
}

model location {
  id      String    @id @default(uuid())
  name    String
  User    User[]
  Webpage Webpage[]
}
